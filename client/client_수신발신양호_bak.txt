# =============================================
# client.py
# ✅ v2.2.3 – 실행경로 & 메시지 캐시 경로 정리 버전
# =============================================

import sys, socket, threading, subprocess, datetime, os
import http.server, urllib.parse, json, ctypes

# 🔰 버전 정보
VERSION = "v2.2.3-pathfix"

# ⚙️ 서버 연결 설정
SERVER_IP = "172.30.101.232"  # 서버 IP (정확히!)
SEND_PORT = 54321             # 서버 수신 포트
CMD_RECV_PORT = 6000          # 클라 수신 포트
LOCAL_HTTP_PORT = 8123        # HTTP 전송 포트

# 🗂️ 실행 경로 설정
BASE_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))         # client.exe가 있는 경로
PARENT_DIR = os.path.dirname(BASE_DIR)                           # 상위 폴더 → VM_Flow_NC.exe 위치

# 📄 경로 기반 파일 지정
AHK_EXEC = os.path.join(PARENT_DIR, "VM_Flow_NC.exe")            # AHK 실행 파일
LOG_FILE = os.path.join(BASE_DIR, "client_debug.log")            # 로그 파일
MSG_FILE = os.path.join(BASE_DIR, "MessageCache.txt")            # 메시지 캐시 파일

# 🛡️ 중복 실행 방지 (Mutex)
mutexname = "Global\\MY_CLIENT_MUTEX_LOCK"
mutex = ctypes.windll.kernel32.CreateMutexW(None, False, mutexname)
if ctypes.windll.kernel32.GetLastError() == 183:
    print("❌ 이미 실행 중 - client.exe 중복 차단됨")
    sys.exit(0)

# 🕒 현재 시각 포맷팅
def now():
    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# 📝 로그 함수
def log(msg):
    text = f"[{now()}] {msg}"
    print(text)
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(text + "\n")
    except Exception as e:
        print(f"[⚠️ 로그 저장 실패] {e}")

# 📤 서버 전송 함수
def send_to_server(server_ip, report_ip, name, diamond, mode="send"):
    payload = {"name": name, "ip": report_ip, "value": f"{diamond} | {mode}"}
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(3)
        s.connect((server_ip, SEND_PORT))
        s.sendall(json.dumps(payload).encode("utf-8"))
        s.close()
        log(f"✅ 서버 전송 완료 → {server_ip}:{SEND_PORT} | {payload}")
    except Exception as e:
        log(f"❌ 서버 전송 실패: {e}")

# 🧠 오토핫키 실행 함수
def run_ahk(msg):
    try:
        subprocess.Popen([AHK_EXEC, msg])
        log(f"📥 명령 전달 → VM_Flow_NC.exe: {msg}")
    except Exception as e:
        log(f"❌ AHK 실행 실패: {e}")

# 🛰️ 명령 수신 스레드 (포트 6000)
class CommandReceiver(threading.Thread):
    def run(self):
        try:
            log(f"[RECV] 서버 명령 대기 중... (port {CMD_RECV_PORT})")
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            s.bind(('0.0.0.0', CMD_RECV_PORT))
            s.listen(1)
            while True:
                conn, addr = s.accept()
                try:
                    data = conn.recv(1024).decode("utf-8").strip()
                    if data:
                        log(f"[RECV] 명령 수신 ← {addr[0]}: {data}")
                        try:
                            with open(MSG_FILE, "w", encoding="utf-8") as f:
                                f.write(data)
                            log(f"📦 메시지 저장 완료 → {MSG_FILE}")
                        except Exception as e:
                            log(f"❌ 메시지 저장 실패: {e}")
                        run_ahk(data)
                except Exception as e:
                    log(f"❌ 명령 수신 오류: {e}")
                finally:
                    conn.close()
        except Exception as e:
            log(f"❌ CommandReceiver 예외: {e}")
            print(f"❌ CommandReceiver 예외: {e}")

# 🌐 HTTP 요청 수신 핸들러 (포트 8123)
class SendHttpHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        parsed = urllib.parse.urlparse(self.path)
        if parsed.path == "/send":
            params = urllib.parse.parse_qs(parsed.query)
            dia  = params.get("dia",  [""])[0]
            name = params.get("name", [""])[0]
            ip   = params.get("ip",   [""])[0]
            mode = params.get("mode", ["send"])[0]

            if all([dia, name, ip]):
                log(f"[HTTP] 전송 요청 수신: {dia}, {mode}, {name}, {ip}")
                send_to_server(SERVER_IP, ip, name, dia, mode)

                response = b"OK"
                self.send_response(200)
                self.send_header("Content-Type", "text/plain; charset=utf-8")
                self.send_header("Content-Length", str(len(response)))
                self.send_header("Connection", "close")
                self.end_headers()
                self.wfile.write(response)
                self.wfile.flush()
                return

        error = b"Bad Request"
        self.send_response(400)
        self.send_header("Content-Type", "text/plain")
        self.send_header("Content-Length", str(len(error)))
        self.send_header("Connection", "close")
        self.end_headers()
        self.wfile.write(error)
        self.wfile.flush()

# 🌐 HTTP 수신 스레드 실행
class HttpReceiver(threading.Thread):
    def run(self):
        try:
            log(f"[HTTP] AHK 전송 요청 대기 중... (port {LOCAL_HTTP_PORT})")
            server = http.server.HTTPServer(("localhost", LOCAL_HTTP_PORT), SendHttpHandler)
            server.serve_forever()
        except Exception as e:
            log(f"❌ HttpReceiver 예외: {e}")
            print(f"❌ HttpReceiver 예외: {e}")

# 🏁 메인 실행 함수
def main():
    log(f"🚀 client.exe 시작됨 ({VERSION})")
    try:
        t1 = CommandReceiver()
        t2 = HttpReceiver()
        t1.daemon = True
        t2.daemon = True
        t1.start()
        t2.start()
    except Exception as e:
        log(f"❌ 스레드 실행 오류: {e}")
        print(f"❌ 스레드 실행 오류: {e}")

    try:
        while True:
            pass
    except KeyboardInterrupt:
        log("🔻 종료 요청 수신")

if __name__ == "__main__":
    main()