
// ✅ 상태값
let condensed = false;
let serverFilter = null;

// ✅ 유틸 함수
    function trimTimestamp(ts) {
      return ts.replace(/^20\d\d-/, '');
    }

	function getThresholdMs() {
	  const el = document.getElementById("threshold");
	  if (!el) return 300000; // 기본값: 5분

	  return parseInt(el.value) * 60 * 1000;
	}

    function setServerFilter(name) {
      serverFilter = name === '__ALL__' ? null : name;
      fetchClients();
    }

// ✅ UI 이벤트 핸들러
    function toggleCondensed() {
      condensed = !condensed;
      document.getElementById("toggle-btn").textContent = condensed ? "전체 모드" : "간결 모드";
      fetchClients();
	}



// ✅ 서버 요약 정보 출력
function updateServerSummary(data) {
  const summary = {};
  data.forEach(c => {
    if (!c.server) return;
    summary[c.server] = (summary[c.server] || 0) + Number(c.dia || 0);
  });

  const serverLinks = Object.entries(summary).map(([server, total]) => {
    const active = server === serverFilter ? 'active' : '';
    return `<span class="${active}" onclick="setServerFilter('${server}')">${server}: ${total}</span>`;
  }).join(' | ');

  const allLink = `<span class="${!serverFilter ? 'active' : ''}" onclick="setServerFilter('__ALL__')">전체 보기</span>`;

  const historyBtn = `<button onclick="showDiaHistory()" style="font-size: 0.8em; padding: 2px 6px; margin-left: 6px;">📅 추적</button>`;

  const html = `다이아 합산 → ${serverLinks} | ${allLink} ${historyBtn}`;

  document.getElementById("serverSummary").innerHTML = html;
}

    function getClientOrder() {
      return JSON.parse(localStorage.getItem("clientOrder") || "[]");
    }

    function setClientOrder(order) {
      localStorage.setItem("clientOrder", JSON.stringify(order));
    }

function fetchClients() {
  const threshold = getThresholdMs();
  const now = Date.now();
  const clientOrder = getClientOrder();

  fetch("/api/clients")
    .then(res => res.json())
    .then(data => {
      updateServerSummary(data);
      const grid = document.getElementById("dashboard");

      const clientMap = {};
      data.forEach(c => clientMap[c.name] = c);

      const names = clientOrder.length > 0 ? clientOrder : data.map(c => c.name);

names.forEach(name => {
  const existing = grid.querySelector(`.card[data-name="${name}"]`);

  // ✅ 이미 있는 카드라면 모드 전환용 내용 업데이트만 해주기
  if (existing) {
    const c = clientMap[name];
    if (c && !existing.classList.contains("empty")) {
      existing.innerHTML = condensed ? `
        <div class="name">${c.name}</div>
        <div class="info">
          ${c.server}<br>${c.dia}
        </div>
      ` : `
        <div class="name">${c.name}</div>
        <div class="info">
          ${c.ip}<br>
          ${c.game} (${c.server})<br>
          ${c.dia}<br>
          ${c.status.toUpperCase()}<br>
          ${trimTimestamp(c.last_report)}
        </div>
      `;
    }
    return; // ✅ 새로 생성 안 함
  }

  const c = clientMap[name];
  const card = document.createElement("div");
  card.setAttribute("data-name", name);

  if (!c) {
    // 🧊 빈 카드 자리
    card.className = "card empty";
    card.setAttribute("data-server", "");
    card.innerHTML = `
      <div class="delete-btn" onclick="deleteCard('${name}')">삭제</div>
      <div class="name">🧊 ${name}</div>
      <div class="info">[미동작 자리]</div>
    `;
  } else {
    const age = now - new Date(c.last_report).getTime();
    const barColor = age < threshold ? '#28a745' : '#dc3545';

    card.className = "card";
    card.setAttribute("data-server", c.server);
    card.style.borderLeftColor = barColor;

    card.innerHTML = condensed ? `
      <div class="name">${c.name}</div>
      <div class="info">
        ${c.server}<br>${c.dia}
      </div>
    ` : `
      <div class="name">${c.name}</div>
      <div class="info">
        ${c.ip}<br>
        ${c.game} (${c.server})<br>
        ${c.dia}<br>
        ${c.status.toUpperCase()}<br>
        ${trimTimestamp(c.last_report)}
      </div>
    `;
  }

  grid.appendChild(card);
});




      Sortable.create(grid, {
        animation: 150,
        swap: true,
        swapClass: "highlight",
        onEnd: () => {
          const newOrder = Array.from(grid.children).map(c => c.dataset.name);
          setClientOrder(newOrder);
        }
      });
	(function storeDailyDiaStats() {
	  const today = new Date().toISOString().slice(0, 10);
	  const dataMap = JSON.parse(localStorage.getItem("dailyDiaStats") || "{}");
	  if (dataMap[today]) return;

	  const stats = {
		TOTAL: 0,
		SERVER_SUM: {},
		COUNT_BY_SERVER: {}
	  };

	  names.forEach(name => {
		const c = clientMap[name];
		if (!c || !c.dia || !c.server) return;

		const dia = Number(c.dia);
		stats[name] = dia;
		stats.TOTAL += dia;
		stats.SERVER_SUM[c.server] = (stats.SERVER_SUM[c.server] || 0) + dia;
		stats.COUNT_BY_SERVER[c.server] = (stats.COUNT_BY_SERVER[c.server] || 0) + 1;
	  });

	  dataMap[today] = stats;
	  localStorage.setItem("dailyDiaStats", JSON.stringify(dataMap));
	})();

	// 👉 그리고 나서 필터 적용
	applyFilters();	
    });
}



function applyFilters() {
  const q = document.getElementById("searchInput")?.value.trim().toLowerCase();
  const minDia = parseInt(document.getElementById("minDiaInput")?.value || "0");
  const server = serverFilter;

  document.querySelectorAll(".card").forEach(card => {
    const isEmpty = card.classList.contains("empty");
    const serverName = card.dataset.server || "";
    const fullText = card.textContent.toLowerCase();

    const matchesText = !q || fullText.includes(q);
    const matchesServer = !server || isEmpty || serverName === server;

    let matchesDia = true;
    if (!isEmpty && minDia > 0) {
      const text = card.textContent;
      const nums = (text.match(/\d{1,3}(,\d{3})*|\d+/g) || []).map(s => parseInt(s.replace(/,/g, '')));
      const maxNum = Math.max(...nums.filter(n => !isNaN(n)));
      matchesDia = maxNum >= minDia;
    }

    const shouldDisplay = matchesText;

    card.classList.remove("ghost-card");

    if (shouldDisplay) {
      card.style.display = "";
      const shouldGhost = !matchesServer || !matchesDia;
      if (shouldGhost) card.classList.add("ghost-card");
    } else {
      card.style.display = "none";
    }
  });
}

	function addEmptyCard() {
	  let name = prompt("빈 카드 이름 입력")?.trim();
	  if (!name) name = `empty-${Date.now()}`;

	  const order = getClientOrder();
	  order.push(name);
	  setClientOrder(order);
	  fetchClients();
	}

    function deleteCard(name) {
      const grid = document.getElementById("dashboard");
      const card = grid.querySelector(`[data-name="${name}"]`);
      if (card) grid.removeChild(card);
      const newOrder = Array.from(grid.children).map(c => c.dataset.name);
      setClientOrder(newOrder);
    }

    fetchClients();
    setInterval(fetchClients, 5000);
	
	function showDiaHistory() {
	  const win = window.open("", "DiaHistoryWindow", "width=1920,height=1080,resizable=yes,scrollbars=yes");
	  if (!win) return alert("📦 팝업 차단을 해제해주세요!");

	  win.document.title = "📅 다이아 수량 추적 기록";

	  win.document.head.innerHTML = `
		<style>
		  body {
			margin: 0;
			padding: 24px;
			background: #fff;
			font-family: 'Segoe UI', sans-serif;
			color: #333;
			max-width: 1080px;
			margin: auto;
		  }
		  h1 {
			font-size: 1.4em;
			margin-bottom: 6px;
		  }
		  .entry {
			display: flex;
			justify-content: space-between;
			padding: 6px 0;
			border-bottom: 1px dashed #eee;
			font-size: 0.9em;
		  }
		  .entry .label { font-weight: bold; }
		  .diff.up { color: #28a745; font-weight: bold; }
		  .diff.down { color: #dc3545; font-weight: bold; }
		  .diff.zero { color: #aaa; }
		</style>
	  `;

	  win.document.body.innerHTML = `
		<h1>📅 다이아 수량 추적 기록</h1>
		<div id="diaHistoryContent">
		  <p style="text-align: center; opacity: 0.6;">(데이터 준비 중입니다...)</p>
		</div>
	  `;

	  // ✨ 데이터 출력은 추후 여기에 추가 가능!
	}	
	
function formatDiff(curr, prev) {
  const diff = curr - prev;
  if (diff > 0) return `<span class="diff up">🔺 +${diff.toLocaleString()}</span>`;
  if (diff < 0) return `<span class="diff down">🔻 ${diff.toLocaleString()}</span>`;
  return `<span class="diff zero">–</span>`;
}

function renderDiaHistoryContent(win) {
  const q = win.document.getElementById("searchClient")?.value.trim().toLowerCase();

  const raw = localStorage.getItem("dailyDiaStats");
  if (!raw) return;

  const dataMap = JSON.parse(raw);
  const dates = Object.keys(dataMap)
    .filter(d => {
      const diff = (new Date() - new Date(d)) / (1000 * 60 * 60 * 24);
      return diff <= 7;
    })
    .sort()
    .reverse();

  let html = "";

  for (let i = 0; i < dates.length; i++) {
    const date = dates[i];
    const curr = dataMap[date];
    const prev = dataMap[dates[i + 1]] || {};

    html += `<div class="section"><h2>${date}</h2>`;

    // ✅ 전체 합산
    const total = curr.TOTAL || 0;
    const totalPrev = prev.TOTAL || 0;
    html += `
      <div class="entry">
        <span class="label">전체 합산</span>
        <span>${total.toLocaleString()} ${formatDiff(total, totalPrev)}</span>
      </div>
    `;

    // ✅ 서버별 합산
    Object.entries(curr.SERVER_SUM || {}).forEach(([server, val]) => {
      const prevVal = (prev.SERVER_SUM || {})[server] || 0;
      const count = curr.COUNT_BY_SERVER?.[server] || 0;
      html += `
        <div class="entry">
          <span class="label">${server} (${count}명)</span>
          <span>${val.toLocaleString()} ${formatDiff(val, prevVal)}</span>
        </div>
      `;
    });

    // ✅ 클라이언트별 변화량 목록
    Object.keys(curr).forEach(name => {
      if (["TOTAL", "SERVER_SUM", "COUNT_BY_SERVER"].includes(name)) return;
      if (q && !name.toLowerCase().includes(q)) return;

      const val = curr[name];
      const prevVal = prev?.[name] || 0;

      html += `
        <div class="entry">
          <span class="label">${name}</span>
          <span>${val.toLocaleString()} ${formatDiff(val, prevVal)}</span>
        </div>
      `;
    });

    // ✅ 증감량 상위 클라 TOP 3 표시
    const clientDiffs = Object.keys(curr)
      .filter(name => !["TOTAL", "SERVER_SUM", "COUNT_BY_SERVER"].includes(name))
      .map(name => {
        const val = curr[name];
        const prevVal = prev?.[name] || 0;
        return { name, val, diff: val - prevVal };
      });

    const topGain = clientDiffs
      .filter(c => c.diff > 0)
      .sort((a, b) => b.diff - a.diff)
      .slice(0, 3);

    if (topGain.length > 0) {
      html += `<div class="entry"><span class="label">📌 상승 클라 TOP 3</span><span></span></div>`;
      topGain.forEach(c => {
        html += `
          <div class="entry">
            <span class="label">${c.name}</span>
            <span>${c.val.toLocaleString()} ${formatDiff(c.val, c.val - c.diff)}</span>
          </div>
        `;
      });
    }

    html += `</div>`; // 🔚 섹션 닫기
  }

  win.document.getElementById("diaHistoryContent").innerHTML = html;
}
function showDiaHistory() {
  const win = window.open("", "DiaHistoryWindow", "width=1920,height=1080,resizable=yes,scrollbars=yes");
  if (!win) return alert("📦 팝업 차단을 해제해주세요!");

  win.document.title = "📅 다이아 수량 추적 기록";
  // ... head/style 정의
  win.document.body.innerHTML = `
  
<div class="toolbar">
  <button onclick="window.close()">닫기</button>
  <button onclick="alert('📈 그래프 준비 중!')">📈 그래프 보기</button>
  <button onclick="clearDiaHistory()">🧹 기록 초기화</button>
  <button onclick="exportDiaHistory()">📤 CSV 내보내기</button>
</div>

<input id="searchClient" placeholder="🔍 클라이언트 검색..." 
  style="padding: 6px; margin: 12px 0; width: 240px; font-size: 0.9em;" 
  oninput="renderDiaHistoryContent(window)">
  
  
    <h1>📅 다이아 수량 추적 기록</h1>
    <div id="diaHistoryContent">⏳ 데이터 불러오는 중...</div>
  `;

  renderDiaHistoryContent(win); // 여기서 실행!
}	
	
Object.keys(curr).forEach(name => {
  // 서버 관련 키 제외
  if (["TOTAL", "SERVER_SUM", "COUNT_BY_SERVER"].includes(name)) return;
  const val = curr[name];
  const prevVal = prev?.[name] || 0;

  html += `
    <div class="entry">
      <span class="label">${name}</span>
      <span>${val.toLocaleString()} ${formatDiff(val, prevVal)}</span>
    </div>
  `;
});

win.document.body.innerHTML = `
  <div class="toolbar">
    <button onclick="window.close()">닫기</button>
    <button onclick="alert('📈 그래프 준비 중!')">📈 그래프 보기</button>
    <button onclick="clearDiaHistory()">🧹 기록 초기화</button>
    <button onclick="exportDiaHistory()">📤 CSV 내보내기</button>
  </div>

  <h1>📅 다이아 수량 추적 기록</h1>
  <div id="diaHistoryContent">⏳ 데이터 불러오는 중...</div>
`;

function clearDiaHistory() {
  if (confirm("📦 모든 추적 기록을 삭제할까요?")) {
    localStorage.removeItem("dailyDiaStats");
    alert("🧹 기록이 초기화되었습니다!");
    location.reload();
  }
}

function exportDiaHistory() {
  const raw = localStorage.getItem("dailyDiaStats");
  if (!raw) return alert("📦 기록이 없습니다!");

  const dataMap = JSON.parse(raw);
  const rows = [["날짜", "클라이언트", "다이아"]];

  Object.entries(dataMap).forEach(([date, stats]) => {
    Object.keys(stats).forEach(name => {
      if (["TOTAL", "SERVER_SUM", "COUNT_BY_SERVER"].includes(name)) return;
      rows.push([date, name, stats[name]]);
    });
  });

  const csv = rows.map(r => r.join(",")).join("\n");
  const blob = new Blob([csv], { type: "text/csv" });
  const url = URL.createObjectURL(blob);

  const a = document.createElement("a");
  a.href = url;
  a.download = "dia-history.csv";
  a.click();
  URL.revokeObjectURL(url);
}


